<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" total="2" passed="1">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="516751" started-at="2012-11-29T06:29:34Z" finished-at="2012-11-29T06:38:11Z">
    <groups>
      <group name="smoketest">
        <method signature="HomeTests.testAllNavigations()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="testAllNavigations" class="com.awb.test.tests.HomeTests"/>
        <method signature="HomeTests.testWCBenefitsByStateMap()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="testWCBenefitsByStateMap" class="com.awb.test.tests.HomeTests"/>
      </group> <!-- smoketest -->
    </groups>
    <test name="Default test" duration-ms="516751" started-at="2012-11-29T06:29:34Z" finished-at="2012-11-29T06:38:11Z">
      <class name="com.awb.test.tests.HomeTests">
        <test-method status="PASS" signature="runBeforeTest()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="runBeforeTest" is-config="true" duration-ms="8" started-at="2012-11-29T11:59:34Z" finished-at="2012-11-29T11:59:34Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runBeforeTest -->
        <test-method status="PASS" signature="storeMethod(java.lang.reflect.Method)[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="storeMethod" is-config="true" duration-ms="8" started-at="2012-11-29T11:59:34Z" finished-at="2012-11-29T11:59:34Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.awb.test.tests.HomeTests.testAllNavigations() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeMethod -->
        <test-method status="PASS" signature="testAllNavigations()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="testAllNavigations" duration-ms="97047" started-at="2012-11-29T11:59:34Z" description="test All Page Navigations" finished-at="2012-11-29T12:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAllNavigations -->
        <test-method status="PASS" signature="runAfterTest()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="runAfterTest" is-config="true" duration-ms="226" started-at="2012-11-29T12:01:11Z" finished-at="2012-11-29T12:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runAfterTest -->
        <test-method status="PASS" signature="runBeforeTest()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="runBeforeTest" is-config="true" duration-ms="0" started-at="2012-11-29T12:01:11Z" finished-at="2012-11-29T12:01:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runBeforeTest -->
        <test-method status="PASS" signature="storeMethod(java.lang.reflect.Method)[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="storeMethod" is-config="true" duration-ms="1" started-at="2012-11-29T12:01:11Z" finished-at="2012-11-29T12:01:11Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void com.awb.test.tests.HomeTests.testWCBenefitsByStateMap() throws java.lang.Exception]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- storeMethod -->
        <test-method status="FAIL" signature="testWCBenefitsByStateMap()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="testWCBenefitsByStateMap" duration-ms="418945" started-at="2012-11-29T12:01:11Z" description="Test WCBenefitsByState Map" finished-at="2012-11-29T12:08:10Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[Click OR link
Click WA link
Click CA link
Click MT link
Click ID link
Click NV link
Click AZ link
Click WY link
Click UT link
Click NM link
Click CO link
Click TX link
Click OK link
Click KS link
Click NE link
Click SD link
Click ND link
Click MN link
Click IA link
Click MO link
Click AR link
Click LA link
Click MS link
Click AL link
Click TN link
Click KY link
Click IN link
Click MI link
Click OH link
Click WV link
Click VA link
Click PA link
Click NY link
Click VT link
Click NH link
Click ME link
Click MA link
Click CT link
Click NJ link
Click MD link
Click NC link
Click SC link
Click GA link
Click FL link
Click HI link
Click AK link
 expected [true[ but found ]false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: Click OR link
Click WA link
Click CA link
Click MT link
Click ID link
Click NV link
Click AZ link
Click WY link
Click UT link
Click NM link
Click CO link
Click TX link
Click OK link
Click KS link
Click NE link
Click SD link
Click ND link
Click MN link
Click IA link
Click MO link
Click AR link
Click LA link
Click MS link
Click AL link
Click TN link
Click KY link
Click IN link
Click MI link
Click OH link
Click WV link
Click VA link
Click PA link
Click NY link
Click VT link
Click NH link
Click ME link
Click MA link
Click CT link
Click NJ link
Click MD link
Click NC link
Click SC link
Click GA link
Click FL link
Click HI link
Click AK link
 expected [true[ but found ]false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:494)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at com.awb.test.tests.HomeTests.testWCBenefitsByStateMap(HomeTests.java:49)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:80)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:714)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:901)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1231)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:127)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:111)
	at org.testng.TestRunner.privateRun(TestRunner.java:767)
	at org.testng.TestRunner.run(TestRunner.java:617)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:334)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:329)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:291)
	at org.testng.SuiteRunner.run(SuiteRunner.java:240)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1197)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1122)
	at org.testng.TestNG.run(TestNG.java:1030)
	at org.testng.remote.RemoteTestNG.run(RemoteTestNG.java:111)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:204)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:175)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testWCBenefitsByStateMap -->
        <test-method status="PASS" signature="runAfterTest()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="runAfterTest" is-config="true" duration-ms="460" started-at="2012-11-29T12:08:10Z" finished-at="2012-11-29T12:08:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runAfterTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:null(com.awb.test.tests.HomeTests)]" name="tearDown" is-config="true" duration-ms="0" started-at="2012-11-29T12:08:11Z" finished-at="2012-11-29T12:08:11Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.awb.test.tests.HomeTests -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
